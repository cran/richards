
R version 2.6.0 RC (2007-09-28 r43016)
Copyright (C) 2007 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(richards)
> 
> # source("sourceModified.R")
> 
> demo(sourceRichards)


	demo(sourceRichards)
	---- ~~~~~~~~~~~~~~

> sSrichards <- selfStart( ~ d + (a - d) / (1 + (2^ny-1)*(input/x50)^b)^(1/ny),
+   function (mCall, data, LHS) initialRichards(mCall, data, LHS), c("a", "d", "b", "x50", "ny"))

> sSrichardsE <- selfStart( ~ d + (a - d) / (1 + ny*(input/e)^b)^(1/ny),
+   function (mCall, data, LHS) initialRichards(mCall, data, LHS, pnames = c("a", "d", "b", "e", "ny")), c("a", "d", "b", "e", "ny"))

> #                           ~ d + (a - d) / (1 + (2^ny-1)*exp(-(xmid-input)/scal))^(1/ny),
> 
> s.richardsLog <- selfStart( ~ a + (d - a) / (1 + (2^ny-1)*exp((xmid-input)/scal))^(1/ny),
+   function (mCall, data, LHS) initialRichardsLog(mCall, data .... [TRUNCATED] 

> sSrichardsLog <- selfStart( ~ d + (a - d) / (1 + (2^ny-1)*exp((input-xmid)/scal))^(1/ny),
+   function (mCall, data, LHS) initialRichardsLog(mCall, data, LHS), c("a", "d", "xmid", "scal", "ny"))

> sSrichardsLogBM <- selfStart( ~ d + (a - d) / (1 + (2^(1/m)-1) * exp(b*(input-xmid)))^(m),
+   function (mCall, data, LHS) initialRichardsLogB(mCall, data, LHS, 
+             pnames = c("a", "d", "xmid", "b", "m")), c("a", "d", "xmid", "b", "m"))

> sSnyFixedLogB <- selfStart( ~ d + (a - d) / (1 + (2^ny-1)*exp(b*(input-xmid)))^(1/ny),
+   function (mCall, data, LHS) initialNyFixedLogB(mCall, data, LHS, ny = NULL), c("a", "d", "xmid", "b"))
> 
> demo(sourceModified)


	demo(sourceModified)
	---- ~~~~~~~~~~~~~~

> `sSnyFixedLog.Cond` <-
+ structure(function (ny, input, a, d, xmid, scal) 
+ {
+     .expr1  <- a - d
+     .expr3  <- 2^ny - 1
+     .expr4  <- input - xmid
+     .expr6  <- exp(.expr4/scal)
+     .expr8  <- 1 + .expr3 * .expr6
+     .expr9  <- 1/ .... [TRUNCATED] 

> `sSnyFixed.Cond` <-
+ structure(function (ny, input, a, d, b, x50) 
+ {
+     .expr1  <- a - d
+     .expr3  <- 2^ny - 1
+     .expr4  <- input/x50
+     .expr5  <- .expr4^b
+     .expr7  <- 1 + .expr3 * .expr5
+     .expr8  <- 1/ny
+     .inv    < .... [TRUNCATED] 

> `sSrichardsLog.Cond` <-
+ structure(function (input, a, d, xmid, scal, ny) 
+ {
+     .expr1   <- a - d
+     .expr2   <- 2^ny
+     .expr3   <- .expr2 - 1
+     .expr4   <- input - xmid
+     .expr6   <- exp(.expr4/scal)
+     .expr8   <- 1 + .exp .... [TRUNCATED] 

> `sSrichards.Cond` <-
+ structure(function (input, a, d, b, x50, ny) 
+ {
+     .expr1   <- a - d
+     .expr2   <- 2^ny
+     .expr3   <- .expr2 - 1
+     .expr4   <- input/x50
+     .expr5   <- .expr4^b
+     .expr7   <- 1 + .expr3 * .expr5
+      .... [TRUNCATED] 

> `sSrichardsE.Cond` <-
+ structure(function (input, a, d, b, e, ny) 
+ {
+     .aMd     <- a - d
+     .expr2   <- input/e
+     .two2ny   <- .expr2^b
+     .Z       <- 1 + ny * .two2ny
+     .m       <- 1/ny
+     .inv     <- .Z <= 0
+     .Z2m     .... [TRUNCATED] 

> `sS.nyFixedLog` <-
+ structure(function (ny, input, a, d, xmid, scal) 
+ {
+     .aMd     <- a - d
+     .t2nym1  <- 2^ny - 1
+     .dmid    <- input - xmid
+     .rscal   <- 1 / scal
+     .edmids  <- exp(.dmid * .rscal) # 'scal' should not be 0!
 .... [TRUNCATED] 

> `sS.nyFixed` <-
+ structure(function (ny, input, a, d, b, x50) 
+ {
+     .aMd     <- a - d
+     .t2nym1  <- 2^ny - 1
+     .f50     <- input / x50         # 'x50' (exp('xmid')) should not be 0!
+     .f502b   <- .f50^b              # 'x' and 'x50 .... [TRUNCATED] 

> `sS.richardsLog` <-
+ structure(function (input, a, d, xmid, scal, ny) 
+ {
+     .aMd     <- a - d
+     .two2ny  <- 2^ny
+     .t2nym1  <- .two2ny - 1
+     .dmid    <- input - xmid
+     .rscal   <- 1 / scal
+     .edmids  <- exp(.dmid * .rscal) .... [TRUNCATED] 

> `sS.richardsLogBM` <-
+ structure(function (input, a, d, xmid, b, m) 
+ {
+     .aMd     <- a - d
+     .two2ny  <- 2^(1/m)             # 'm' should not be 0!
+     .t2nym1  <- .two2ny - 1
+     .dmid    <- input - xmid
+     .edmids  <- exp(b * .d .... [TRUNCATED] 

> `sS.richards` <-
+ structure(function (input, a, d, b, x50, ny) 
+ {
+     .aMd     <- a - d
+     .two2ny  <- 2^ny
+     .t2nym1  <- .two2ny - 1
+     .f50     <- input / x50         # 'x50' (exp('xmid')) should not be 0!
+     .f502b   <- .f50^b  .... [TRUNCATED] 

> `sS.richardsE` <-
+ structure(function (input, a, d, b, e, ny) 
+ {
+     .aMd     <- a - d
+     .fe      <- input / e           # 'e' (~ exp('xmid')) should not be 0!
+     .fe2b    <- .fe^b               # 'x' and 'e' both positive (or negative) .... [TRUNCATED] 
> 
> # source("../demo/sourceNyExtras.R")
> 
> demo(sourceNyExtras)


	demo(sourceNyExtras)
	---- ~~~~~~~~~~~~~~

> #          k        ny           factor         potens  
> #  [1,]  -15       -16          -0.9999847     -1/16    
> #  [2,]   -7        -8          -0.9960938     -1/8     
> #  [3,]   -3        -4          -0.9375        -1/4     
> #  [4,]   -1 .... [TRUNCATED] 

> SS.d.nym1o3 <- selfStart( ~ d + (a - d) * (1 + (2^(-1/3)-1) * (input/x50)^b)^3,             function (mCall, data, LHS) initialNyFixed(mCall, data, LHS, ny =   1  ), c("a", "d", "b", "x50"))

> SS.d.ny0    <- selfStart( ~ d + (a - d) * exp(- log(2) * (input / x50)^b),                  function (mCall, data, LHS) initialNyFixed(mCall, data, LHS, ny =   0  ), c("a", "d", "b", "x50"))

> SS.d.ny1    <- selfStart( ~ d + (a - d) / (1 + (input/x50)^b),                              function (mCall, data, LHS) initialNyFixed(mCall, data, LHS, ny =   1  ), c("a", "d", "b", "x50"))

> SS.d.ny2    <- selfStart( ~ d + (a - d) / sqrt(1 + 3 * (input/x50)^b),                      function (mCall, data, LHS) initialNyFixed(mCall, data, LHS, ny =   2  ), c("a", "d", "b", "x50"))

> SS.d.ny3    <- selfStart( ~ d + (a - d) / (1 + 7 * (input/x50)^b)^(1/3),                    function (mCall, data, LHS) initialNyFixed(mCall, data, LHS, ny =   3  ), c("a", "d", "b", "x50"))

> SS.d.ny4    <- selfStart( ~ d + (a - d) / sqrt(sqrt((1 + 15 * (input/x50)^b))),             function (mCall, data, LHS) initialNyFixed(mCall, data, LHS, ny =   4  ), c("a", "d", "b", "x50"))

> SS.d.ny8    <- selfStart( ~ d + (a - d) / (1 + (255 - 1) * (input/x50)^b)^(1/8),            function (mCall, data, LHS) initialNyFixed(mCall, data, LHS, ny =   8  ), c("a", "d", "b", "x50"))

> sSny.m16   <- selfStart( ~ d + (a - d) / (1 + (2^(-16  ) - 1) * (input/x50)^b)^( -1/16  ), function (mCall, data, LHS) initialNyFixed(mCall, data, LHS, ny = -16  ), c("a", "d", "b", "x50"))

> sSny.m8    <- selfStart( ~ d + (a - d) / (1 + (2^( -8  ) - 1) * (input/x50)^b)^( -1/8   ), function (mCall, data, LHS) initialNyFixed(mCall, data, LHS, ny =  -8  ), c("a", "d", "b", "x50"))

> sSny.m4    <- selfStart( ~ d + (a - d) / (1 + (2^( -4  ) - 1) * (input/x50)^b)^( -1/4   ), function (mCall, data, LHS) initialNyFixed(mCall, data, LHS, ny =  -4  ), c("a", "d", "b", "x50"))

> sSny.m2    <- selfStart( ~ d + (a - d) / (1 +         - 3 / 4 * (input/x50)^b)^( -1/2   ), function (mCall, data, LHS) initialNyFixed(mCall, data, LHS, ny =  -2  ), c("a", "d", "b", "x50"))

> sSny.m1    <- selfStart( ~ d + (a - d) / (1 +         - 1 / 2 * (input/x50)^b)^( -1     ), function (mCall, data, LHS) initialNyFixed(mCall, data, LHS, ny =  -1  ), c("a", "d", "b", "x50"))

> sSny.m4o5  <- selfStart( ~ d + (a - d) / (1 +  (2^(-4/5) - 1) * (input/x50)^b)^( -5/4   ), function (mCall, data, LHS) initialNyFixed(mCall, data, LHS, ny =  -4/5), c("a", "d", "b", "x50"))

> sSny.m3o4  <- selfStart( ~ d + (a - d) / (1 +  (2^(-3/4) - 1) * (input/x50)^b)^( -4/3   ), function (mCall, data, LHS) initialNyFixed(mCall, data, LHS, ny =  -3/4), c("a", "d", "b", "x50"))

> sSny.m2o3  <- selfStart( ~ d + (a - d) / (1 +  (2^(-2/3) - 1) * (input/x50)^b)^( -3/2   ), function (mCall, data, LHS) initialNyFixed(mCall, data, LHS, ny =  -2/3), c("a", "d", "b", "x50"))

> sSny.m1o2  <- selfStart( ~ d + (a - d) / (1 +  (2^(-1/2) - 1) * (input/x50)^b)^( -2     ), function (mCall, data, LHS) initialNyFixed(mCall, data, LHS, ny =  -1/2), c("a", "d", "b", "x50"))

> sSny.m1o3  <- selfStart( ~ d + (a - d) / (1 +  (2^(-1/3) - 1) * (input/x50)^b)^( -3     ), function (mCall, data, LHS) initialNyFixed(mCall, data, LHS, ny =  -1/3), c("a", "d", "b", "x50"))

> sSny.m1o4  <- selfStart( ~ d + (a - d) / (1 +  (2^(-1/4) - 1) * (input/x50)^b)^( -4     ), function (mCall, data, LHS) initialNyFixed(mCall, data, LHS, ny =  -1/4), c("a", "d", "b", "x50"))

> sSny.m1o5  <- selfStart( ~ d + (a - d) / (1 +  (2^(-1/5) - 1) * (input/x50)^b)^( -5     ), function (mCall, data, LHS) initialNyFixed(mCall, data, LHS, ny =  -1/5), c("a", "d", "b", "x50"))

> sSny.m1o6  <- selfStart( ~ d + (a - d) / (1 +  (2^(-1/6) - 1) * (input/x50)^b)^( -6     ), function (mCall, data, LHS) initialNyFixed(mCall, data, LHS, ny =  -1/6), c("a", "d", "b", "x50"))

> sSny.m1o7  <- selfStart( ~ d + (a - d) / (1 +  (2^(-1/7) - 1) * (input/x50)^b)^( -7     ), function (mCall, data, LHS) initialNyFixed(mCall, data, LHS, ny =  -1/6), c("a", "d", "b", "x50"))

> sSny.m1o8  <- selfStart( ~ d + (a - d) / (1 +  (2^(-1/8) - 1) * (input/x50)^b)^( -8     ), function (mCall, data, LHS) initialNyFixed(mCall, data, LHS, ny =  -1/6), c("a", "d", "b", "x50"))

> sSny.m1o16 <- selfStart( ~ d + (a - d) / (1 + (2^(-1/16) - 1) * (input/x50)^b)^( -16    ), function (mCall, data, LHS) initialNyFixed(mCall, data, LHS, ny =  -1/6), c("a", "d", "b", "x50"))

> sSny.m1o32 <- selfStart( ~ d + (a - d) / (1 + (2^(-1/32) - 1) * (input/x50)^b)^( -32    ), function (mCall, data, LHS) initialNyFixed(mCall, data, LHS, ny =  -1/6), c("a", "d", "b", "x50"))

> # sSny.0   <- selfStart( ~ d + (a - d) / (1 +   (2^( 0 ) - 1) * (input/x50)^b)^( 1/0    ), function (mCall, data, LHS) initialNyFixed(mCall, data, LHS, ny =   0  ), c("a", "d", "b", "x50"))
> sSny.1o32  <- selfStart( ~ d + (a - d) / (1 + (2^( 1/32) .... [TRUNCATED] 

> sSny.1o16  <- selfStart( ~ d + (a - d) / (1 + (2^( 1/16) - 1) * (input/x50)^b)^(  16    ), function (mCall, data, LHS) initialNyFixed(mCall, data, LHS, ny =   1/6), c("a", "d", "b", "x50"))

> sSny.1o8   <- selfStart( ~ d + (a - d) / (1 +  (2^( 1/8) - 1) * (input/x50)^b)^(  8     ), function (mCall, data, LHS) initialNyFixed(mCall, data, LHS, ny =   1/6), c("a", "d", "b", "x50"))

> sSny.1o7   <- selfStart( ~ d + (a - d) / (1 +  (2^( 1/7) - 1) * (input/x50)^b)^(  7     ), function (mCall, data, LHS) initialNyFixed(mCall, data, LHS, ny =   1/6), c("a", "d", "b", "x50"))

> sSny.1o6   <- selfStart( ~ d + (a - d) / (1 +  (2^( 1/6) - 1) * (input/x50)^b)^(  6     ), function (mCall, data, LHS) initialNyFixed(mCall, data, LHS, ny =   1/6), c("a", "d", "b", "x50"))

> sSny.1o5   <- selfStart( ~ d + (a - d) / (1 +  (2^( 1/5) - 1) * (input/x50)^b)^(  5     ), function (mCall, data, LHS) initialNyFixed(mCall, data, LHS, ny =   1/5), c("a", "d", "b", "x50"))

> sSny.1o4   <- selfStart( ~ d + (a - d) / (1 +  (2^( 1/4) - 1) * (input/x50)^b)^(  4     ), function (mCall, data, LHS) initialNyFixed(mCall, data, LHS, ny =   1/4), c("a", "d", "b", "x50"))

> sSny.1o3   <- selfStart( ~ d + (a - d) / (1 +  (2^( 1/3) - 1) * (input/x50)^b)^(  3     ), function (mCall, data, LHS) initialNyFixed(mCall, data, LHS, ny =   1/3), c("a", "d", "b", "x50"))

> sSny.1o2   <- selfStart( ~ d + (a - d) / (1 +  (2^( 1/2) - 1) * (input/x50)^b)^(  2     ), function (mCall, data, LHS) initialNyFixed(mCall, data, LHS, ny =   1/2), c("a", "d", "b", "x50"))

> sSny.1     <- selfStart( ~ d + (a - d) / (1 +               1 * (input/x50)^b)^(  1/1   ), function (mCall, data, LHS) initialNyFixed(mCall, data, LHS, ny =   2  ), c("a", "d", "b", "x50"))

> sSny.2     <- selfStart( ~ d + (a - d) / (1 +               3 * (input/x50)^b)^(  1/2   ), function (mCall, data, LHS) initialNyFixed(mCall, data, LHS, ny =   2  ), c("a", "d", "b", "x50"))

> sSny.3     <- selfStart( ~ d + (a - d) / (1 +               7 * (input/x50)^b)^(  1/3   ), function (mCall, data, LHS) initialNyFixed(mCall, data, LHS, ny =   2  ), c("a", "d", "b", "x50"))

> sSny.4     <- selfStart( ~ d + (a - d) / (1 +              15 * (input/x50)^b)^(  1/4   ), function (mCall, data, LHS) initialNyFixed(mCall, data, LHS, ny =   4  ), c("a", "d", "b", "x50"))

> sSny.8     <- selfStart( ~ d + (a - d) / (1 +             255 * (input/x50)^b)^(  1/8   ), function (mCall, data, LHS) initialNyFixed(mCall, data, LHS, ny =   8  ), c("a", "d", "b", "x50"))

> sSny.16    <- selfStart( ~ d + (a - d) / (1 +           65535 * (input/x50)^b)^(  1/16  ), function (mCall, data, LHS) initialNyFixed(mCall, data, LHS, ny =  16  ), c("a", "d", "b", "x50"))

> sSny.32    <- selfStart( ~ d + (a - d) / (1 + (2^( 32  ) - 1) * (input/x50)^b)^(  1/32  ), function (mCall, data, LHS) initialNyFixed(mCall, data, LHS, ny =  32  ), c("a", "d", "b", "x50"))

> sSny.64    <- selfStart( ~ d + (a - d) / (1 + (2^( 64  ) - 1) * (input/x50)^b)^(  1/64  ), function (mCall, data, LHS) initialNyFixed(mCall, data, LHS, ny =  64  ), c("a", "d", "b", "x50"))

> sSny.128   <- selfStart( ~ d + (a - d) / (1 + (2^(128  ) - 1) * (input/x50)^b)^(  1/128 ), function (mCall, data, LHS) initialNyFixed(mCall, data, LHS, ny = 128  ), c("a", "d", "b", "x50"))

> `SSny.m16` <-
+ structure(function (input, a, d, b, x50) 
+ {
+     .aMd     <- a - d
+     .t2nym1  <- 2^-16 - 1
+     .f50     <- input / x50         # 'x50' (exp('xmid')) should not be 0!
+     .f502b   <- .f50^b              # 'x' and 'x50' bot .... [TRUNCATED] 

> `SSny.m8` <-
+ structure(function (input, a, d, b, x50) 
+ {
+     .aMd     <- a - d
+     .t2nym1  <- 2^-8 - 1
+     .f50     <- input / x50         # 'x50' (exp('xmid')) should not be 0!
+     .f502b   <- .f50^b              # 'x' and 'x50' both  .... [TRUNCATED] 

> `SSny.m4` <-
+ structure(function (input, a, d, b, x50) 
+ {
+     .aMd     <- a - d
+     .t2nym1  <- 2^-4 - 1
+     .f50     <- input / x50         # 'x50' (exp('xmid')) should not be 0!
+     .f502b   <- .f50^b              # 'x' and 'x50' both  .... [TRUNCATED] 

> `SSny.m2` <-
+ structure(function (input, a, d, b, x50) 
+ {
+     .aMd     <- a - d
+     .t2nym1  <- -3/4
+     .f50     <- input / x50         # 'x50' (exp('xmid')) should not be 0!
+     .f502b   <- .f50^b              # 'x' and 'x50' both posi .... [TRUNCATED] 

> `SSny.m1` <-
+ structure(function (input, a, d, b, x50) 
+ {
+     .aMd     <- a - d
+     .t2nym1  <- -1 / 2
+     .f50     <- input / x50         # 'x50' (exp('xmid')) should not be 0!
+     .f502b   <- .f50^b              # 'x' and 'x50' both po .... [TRUNCATED] 

> `SSny.m4o5` <-
+ structure(function (input, a, d, b, x50) 
+ {
+     .aMd     <- a - d
+     .t2nym1  <- 2^(-4/5) - 1
+     .f50     <- input / x50         # 'x50' (exp('xmid')) should not be 0!
+     .f502b   <- .f50^b              # 'x' and 'x50' .... [TRUNCATED] 

> `SSny.m3o4` <-
+ structure(function (input, a, d, b, x50) 
+ {
+     .aMd     <- a - d
+     .t2nym1  <- 2^(-3/4) - 1
+     .f50     <- input / x50         # 'x50' (exp('xmid')) should not be 0!
+     .f502b   <- .f50^b              # 'x' and 'x50' .... [TRUNCATED] 

> `SSny.m2o3` <-
+ structure(function (input, a, d, b, x50) 
+ {
+     .aMd     <- a - d
+     .t2nym1  <- 2^(-2/3) - 1
+     .f50     <- input / x50         # 'x50' (exp('xmid')) should not be 0!
+     .f502b   <- .f50^b              # 'x' and 'x50' .... [TRUNCATED] 

> `SSny.m1o2` <-
+ structure(function (input, a, d, b, x50) 
+ {
+     .aMd     <- a - d
+     .t2nym1  <- 2^(-1/2) - 1
+     .f50     <- input / x50         # 'x50' (exp('xmid')) should not be 0!
+     .f502b   <- .f50^b              # 'x' and 'x50' .... [TRUNCATED] 

> `SSny.m1o3` <-
+ structure(function (input, a, d, b, x50) 
+ {
+     .aMd     <- a - d
+     .t2nym1  <- 2^(-1/3) - 1
+     .f50     <- input / x50         # 'x50' (exp('xmid')) should not be 0!
+     .f502b   <- .f50^b              # 'x' and 'x50' .... [TRUNCATED] 

> `SSny.m1o4` <-
+ structure(function (input, a, d, b, x50) 
+ {
+     .aMd     <- a - d
+     .t2nym1  <- 2^(-1/4) - 1
+     .f50     <- input / x50         # 'x50' (exp('xmid')) should not be 0!
+     .f502b   <- .f50^b              # 'x' and 'x50' .... [TRUNCATED] 

> `SSny.m1o5` <-
+ structure(function (input, a, d, b, x50) 
+ {
+     .aMd     <- a - d
+     .t2nym1  <- 2^(-1/5) - 1
+     .f50     <- input / x50         # 'x50' (exp('xmid')) should not be 0!
+     .f502b   <- .f50^b              # 'x' and 'x50' .... [TRUNCATED] 

> `SSny.m1o6` <-
+ structure(function (input, a, d, b, x50) 
+ {
+     .aMd     <- a - d
+     .t2nym1  <- 2^(-1/6) - 1
+     .f50     <- input / x50         # 'x50' (exp('xmid')) should not be 0!
+     .f502b   <- .f50^b              # 'x' and 'x50' .... [TRUNCATED] 

> `SSny.m1o7` <-
+ structure(function (input, a, d, b, x50) 
+ {
+     .aMd     <- a - d
+     .t2nym1  <- 2^(-1/7) - 1
+     .f50     <- input / x50         # 'x50' (exp('xmid')) should not be 0!
+     .f502b   <- .f50^b              # 'x' and 'x50' .... [TRUNCATED] 

> `SSny.m1o8` <-
+ structure(function (input, a, d, b, x50) 
+ {
+     .aMd     <- a - d
+     .t2nym1  <- 2^(-1/8) - 1
+     .f50     <- input / x50         # 'x50' (exp('xmid')) should not be 0!
+     .f502b   <- .f50^b              # 'x' and 'x50' .... [TRUNCATED] 

> `SSny.m1o16` <-
+ structure(function (input, a, d, b, x50) 
+ {
+     .aMd     <- a - d
+     .t2nym1  <- 2^(-1/16) - 1
+     .f50     <- input / x50         # 'x50' (exp('xmid')) should not be 0!
+     .f502b   <- .f50^b              # 'x' and 'x5 .... [TRUNCATED] 

> `SSny.m1o32` <-
+ structure(function (input, a, d, b, x50) 
+ {
+     .aMd     <- a - d
+     .t2nym1  <- 2^(-1/32) - 1
+     .f50     <- input / x50         # 'x50' (exp('xmid')) should not be 0!
+     .f502b   <- .f50^b              # 'x' and 'x5 .... [TRUNCATED] 

> `SSny.1o32` <-
+ structure(function (input, a, d, b, x50) 
+ {
+     .aMd     <- a - d
+     .t2nym1  <- 2^(1/32) - 1
+     .f50     <- input / x50         # 'x50' (exp('xmid')) should not be 0!
+     .f502b   <- .f50^b              # 'x' and 'x50' .... [TRUNCATED] 

> `SSny.1o16` <-
+ structure(function (input, a, d, b, x50) 
+ {
+     .aMd     <- a - d
+     .t2nym1  <- 2^(1/16) - 1
+     .f50     <- input / x50         # 'x50' (exp('xmid')) should not be 0!
+     .f502b   <- .f50^b              # 'x' and 'x50' .... [TRUNCATED] 

> `SSny.1o8` <-
+ structure(function (input, a, d, b, x50) 
+ {
+     .aMd     <- a - d
+     .t2nym1  <- 2^(1/8) - 1
+     .f50     <- input / x50         # 'x50' (exp('xmid')) should not be 0!
+     .f502b   <- .f50^b              # 'x' and 'x50' b .... [TRUNCATED] 

> `SSny.1o7` <-
+ structure(function (input, a, d, b, x50) 
+ {
+     .aMd     <- a - d
+     .t2nym1  <- 2^(1/7) - 1
+     .f50     <- input / x50         # 'x50' (exp('xmid')) should not be 0!
+     .f502b   <- .f50^b              # 'x' and 'x50' b .... [TRUNCATED] 

> `SSny.1o6` <-
+ structure(function (input, a, d, b, x50) 
+ {
+     .aMd     <- a - d
+     .t2nym1  <- 2^(1/6) - 1
+     .f50     <- input / x50         # 'x50' (exp('xmid')) should not be 0!
+     .f502b   <- .f50^b              # 'x' and 'x50' b .... [TRUNCATED] 

> `SSny.1o5` <-
+ structure(function (input, a, d, b, x50) 
+ {
+     .aMd     <- a - d
+     .t2nym1  <- 2^(1/5) - 1
+     .f50     <- input / x50         # 'x50' (exp('xmid')) should not be 0!
+     .f502b   <- .f50^b              # 'x' and 'x50' b .... [TRUNCATED] 

> `SSny.1o4` <-
+ structure(function (input, a, d, b, x50) 
+ {
+     .aMd     <- a - d
+     .t2nym1  <- 2^(1/4) - 1
+     .f50     <- input / x50         # 'x50' (exp('xmid')) should not be 0!
+     .f502b   <- .f50^b              # 'x' and 'x50' b .... [TRUNCATED] 

> `SSny.1o3` <-
+ structure(function (input, a, d, b, x50) 
+ {
+     .aMd     <- a - d
+     .t2nym1  <- 2^(1/3) - 1
+     .f50     <- input / x50         # 'x50' (exp('xmid')) should not be 0!
+     .f502b   <- .f50^b              # 'x' and 'x50' b .... [TRUNCATED] 

> `SSny.1o2` <-
+ structure(function (input, a, d, b, x50) 
+ {
+     .aMd     <- a - d
+     .t2nym1  <- 2^(1/2) - 1
+     .f50     <- input / x50         # 'x50' (exp('xmid')) should not be 0!
+     .f502b   <- .f50^b              # 'x' and 'x50' b .... [TRUNCATED] 

> `SSny.1` <-
+ structure(function (input, a, d, b, x50) 
+ {
+     .aMd     <- a - d
+     .f50     <- input / x50         # 'x50' (exp('xmid')) should not be 0!
+     .f502b   <- .f50^b              # 'x' and 'x50' both positive (or negative)!
+    .... [TRUNCATED] 

> `SSny.2` <-
+ structure(function (input, a, d, b, x50) 
+ {
+     .aMd     <- a - d
+     .t2nym1  <- 3 # 2^(2) - 1
+     .f50     <- input / x50         # 'x50' (exp('xmid')) should not be 0!
+     .f502b   <- .f50^b              # 'x' and 'x50' b .... [TRUNCATED] 

> `SSny.3` <-
+ structure(function (input, a, d, b, x50) 
+ {
+     .aMd     <- a - d
+     .t2nym1  <- 7 # 2^(3) - 1
+     .f50     <- input / x50         # 'x50' (exp('xmid')) should not be 0!
+     .f502b   <- .f50^b              # 'x' and 'x50' b .... [TRUNCATED] 

> `SSny.4` <-
+ structure(function (input, a, d, b, x50) 
+ {
+     .aMd     <- a - d
+     .t2nym1  <- 15 # 2^(4) - 1
+     .f50     <- input / x50         # 'x50' (exp('xmid')) should not be 0!
+     .f502b   <- .f50^b              # 'x' and 'x50'  .... [TRUNCATED] 

> `SSny.8` <-
+ structure(function (input, a, d, b, x50) 
+ {
+     .aMd     <- a - d
+     .t2nym1  <- 2^(8) - 1
+     .f50     <- input / x50         # 'x50' (exp('xmid')) should not be 0!
+     .f502b   <- .f50^b              # 'x' and 'x50' both  .... [TRUNCATED] 

> `SSny.16` <-
+ structure(function (input, a, d, b, x50) 
+ {
+     .aMd     <- a - d
+     .t2nym1  <- 2^(16) - 1
+     .f50     <- input / x50         # 'x50' (exp('xmid')) should not be 0!
+     .f502b   <- .f50^b              # 'x' and 'x50' bot .... [TRUNCATED] 

> `SSny.32` <-
+ structure(function (input, a, d, b, x50) 
+ {
+     .aMd     <- a - d
+     .t2nym1  <- 2^(32) - 1
+     .f50     <- input / x50         # 'x50' (exp('xmid')) should not be 0!
+     .f502b   <- .f50^b              # 'x' and 'x50' bot .... [TRUNCATED] 

> `SSny.64` <-
+ structure(function (input, a, d, b, x50) 
+ {
+     .aMd     <- a - d
+     .t2nym1  <- 2^(64) - 1
+     .f50     <- input / x50         # 'x50' (exp('xmid')) should not be 0!
+     .f502b   <- .f50^b              # 'x' and 'x50' bot .... [TRUNCATED] 

> `SSny.128` <-
+ structure(function (input, a, d, b, x50) 
+ {
+     .aMd     <- a - d
+     .t2nym1  <- 2^(128) - 1
+     .f50     <- input / x50         # 'x50' (exp('xmid')) should not be 0!
+     .f502b   <- .f50^b              # 'x' and 'x50' b .... [TRUNCATED] 
> 
> 
> ls()
 [1] "s.richardsLog"      "SS.d.ny0"           "SS.d.ny1"          
 [4] "SS.d.ny2"           "SS.d.ny3"           "SS.d.ny4"          
 [7] "SS.d.ny8"           "SS.d.nym1"          "SS.d.nym1o3"       
[10] "sS.nyFixed"         "sS.nyFixedLog"      "sS.richards"       
[13] "sS.richardsE"       "sS.richardsLog"     "sS.richardsLogBM"  
[16] "sSny.1"             "SSny.1"             "sSny.128"          
[19] "SSny.128"           "sSny.16"            "SSny.16"           
[22] "sSny.1o16"          "SSny.1o16"          "sSny.1o2"          
[25] "SSny.1o2"           "sSny.1o3"           "SSny.1o3"          
[28] "sSny.1o32"          "SSny.1o32"          "sSny.1o4"          
[31] "SSny.1o4"           "sSny.1o5"           "SSny.1o5"          
[34] "sSny.1o6"           "SSny.1o6"           "sSny.1o7"          
[37] "SSny.1o7"           "sSny.1o8"           "SSny.1o8"          
[40] "sSny.2"             "SSny.2"             "sSny.3"            
[43] "SSny.3"             "sSny.32"            "SSny.32"           
[46] "sSny.4"             "SSny.4"             "sSny.64"           
[49] "SSny.64"            "sSny.8"             "SSny.8"            
[52] "sSny.m1"            "SSny.m1"            "sSny.m16"          
[55] "SSny.m16"           "sSny.m1o16"         "SSny.m1o16"        
[58] "sSny.m1o2"          "SSny.m1o2"          "sSny.m1o3"         
[61] "SSny.m1o3"          "sSny.m1o32"         "SSny.m1o32"        
[64] "sSny.m1o4"          "SSny.m1o4"          "sSny.m1o5"         
[67] "SSny.m1o5"          "sSny.m1o6"          "SSny.m1o6"         
[70] "sSny.m1o7"          "SSny.m1o7"          "sSny.m1o8"         
[73] "SSny.m1o8"          "sSny.m2"            "SSny.m2"           
[76] "sSny.m2o3"          "SSny.m2o3"          "sSny.m3o4"         
[79] "SSny.m3o4"          "sSny.m4"            "SSny.m4"           
[82] "sSny.m4o5"          "SSny.m4o5"          "sSny.m8"           
[85] "SSny.m8"            "sSnyFixed.Cond"     "sSnyFixedLog.Cond" 
[88] "sSnyFixedLogB"      "sSrichards"         "sSrichards.Cond"   
[91] "sSrichardsE"        "sSrichardsE.Cond"   "sSrichardsLog"     
[94] "sSrichardsLog.Cond" "sSrichardsLogBM"   
> 
> show <- function(ny, a.1, a.2, label, rlim = 10^-13, dlim = 10^-14) {
+ 
+   print(label)
+ 
+   print(c(a.1))
+   print(c(a.2))
+ 
+   print(c(a.1 - a.2))
+ 
+   if (TRUE) {
+     d1 <- attributes(a.1)$gradient - attributes(a.2)$gradient
+     s1 <- attributes(a.1)$gradient + attributes(a.2)$gradient
+     r1 <- ifelse(d1 == 0, 0, d1 / s1)
+     r1 <- ifelse(abs(r1) < rlim, 0, r1)
+     if ((any(range(r1, na.rm = TRUE)) != 0) & (any(abs(range(d1, na.rm = TRUE)) > dlim))) {
+       print(paste("1/3 -", label, ": ", paste(range(r1, na.rm = TRUE), collapse = ";"),
+                                  " + ", paste(range(d1, na.rm = TRUE), collapse = ";")
+            ))
+     # print(abs(range(d1)))
+     # print(r1)
+     # print(a.1)
+     # print(a.2)
+     }
+   }
+ 
+ }
> 
> fewTests <-  function(a = 0.1, d = 2.4, x50 = 100, b = 2, ny = -0.25,
+                       x = c(25, 50, 100, 200, 400, 800)) {
+ 
+   subtitle <- paste("a =", a, ", d =",   d, ", x50 =", x50, 
+                   ", b =", b, ", and ny =",  ny, ".")
+ 
+   print(subtitle)
+ 
+   s.2.1 <-        SSnym1(     x, a, d, x50 = x50, b = b)
+   s.2.2 <-       SSny.m1(     x, a, d, x50 = x50, b = b)
+   show(ny, s.2.1, s.2.2, "Demo: SSny.m1")
+ 
+   s.2.1 <-        SSnym1(     x, a, d, x50 = x50, b = b)
+   s.2.2 <-     SS.d.nym1(     x, a, d, x50 = x50, b = b)
+   show(ny, s.2.1, s.2.2, "Documentation: SS.d.nym1")
+ 
+   s.2.1 <-        SSnym1(     x, a, d, x50 = x50, b = b)
+   s.2.2 <-       sSny.m1(     x, a, d, x50 = x50, b = b)
+   show(ny, s.2.1, s.2.2, "Simple: sSny.m1")
+ 
+   s.2.1 <-        SSnym1o3(     x, a, d, x50 = x50, b = b)
+   s.2.2 <-       SSny.m1o3(     x, a, d, x50 = x50, b = b)
+   show(ny, s.2.1, s.2.2, "Demo: SSny.m1o3")
+ 
+   s.2.1 <-        SSnym1o3(     x, a, d, x50 = x50, b = b)
+   s.2.2 <-     SS.d.nym1o3(     x, a, d, x50 = x50, b = b)
+   show(ny, s.2.1, s.2.2, "Documentation: SS.d.nym1o3")
+ 
+   s.2.1 <-        SSnym1o3(     x, a, d, x50 = x50, b = b)
+   s.2.2 <-       sSny.m1o3(     x, a, d, x50 = x50, b = b)
+   show(ny, s.2.1, s.2.2, "Simple: sSny.m1o3")
+ 
+ 
+   s.2.1 <-        SSny1(     x, a, d, x50 = x50, b = b)
+   s.2.2 <-       SSny.1(     x, a, d, x50 = x50, b = b)
+   show(ny, s.2.1, s.2.2, "Demo: SSny.1")
+ 
+   s.2.1 <-        SSny1(     x, a, d, x50 = x50, b = b)
+   s.2.2 <-     SS.d.ny1(     x, a, d, x50 = x50, b = b)
+   show(ny, s.2.1, s.2.2, "Documentation: SS.d.ny1")
+ 
+   s.2.1 <-        SSny1(     x, a, d, x50 = x50, b = b)
+   s.2.2 <-       sSny.1(     x, a, d, x50 = x50, b = b)
+   show(ny, s.2.1, s.2.2, "Simple: sSny.1")
+ 
+   s.2.1 <-        SSny2(     x, a, d, x50 = x50, b = b)
+   s.2.2 <-       SSny.2(     x, a, d, x50 = x50, b = b)
+   show(ny, s.2.1, s.2.2, "Demo: SSny.2")
+ 
+   s.2.1 <-        SSny2(     x, a, d, x50 = x50, b = b)
+   s.2.2 <-     SS.d.ny2(     x, a, d, x50 = x50, b = b)
+   show(ny, s.2.1, s.2.2, "Documentation: SS.d.ny2")
+ 
+   s.2.1 <-        SSny2(     x, a, d, x50 = x50, b = b)
+   s.2.2 <-       sSny.2(     x, a, d, x50 = x50, b = b)
+   show(ny, s.2.1, s.2.2, "Simple: sSny.2")
+ 
+   s.2.1 <-        SSny3(     x, a, d, x50 = x50, b = b)
+   s.2.2 <-       SSny.3(     x, a, d, x50 = x50, b = b)
+   show(ny, s.2.1, s.2.2, "Demo: SSny.3")
+ 
+   s.2.1 <-        SSny3(     x, a, d, x50 = x50, b = b)
+   s.2.2 <-     SS.d.ny3(     x, a, d, x50 = x50, b = b)
+   show(ny, s.2.1, s.2.2, "Documentation: SS.d.ny3")
+ 
+   s.2.1 <-        SSny3(     x, a, d, x50 = x50, b = b)
+   s.2.2 <-       sSny.3(     x, a, d, x50 = x50, b = b)
+   show(ny, s.2.1, s.2.2, "Simple: sSny.3")
+ 
+   s.2.1 <-        SSny4(     x, a, d, x50 = x50, b = b)
+   s.2.2 <-       SSny.4(     x, a, d, x50 = x50, b = b)
+   show(ny, s.2.1, s.2.2, "Demo: SSny.4")
+ 
+   s.2.1 <-        SSny4(     x, a, d, x50 = x50, b = b)
+   s.2.2 <-     SS.d.ny4(     x, a, d, x50 = x50, b = b)
+   show(ny, s.2.1, s.2.2, "Documentation: SS.d.ny4")
+ 
+   s.2.1 <-        SSny4(     x, a, d, x50 = x50, b = b)
+   s.2.2 <-       sSny.4(     x, a, d, x50 = x50, b = b)
+   show(ny, s.2.1, s.2.2, "Simple: sSny.4")
+ 
+ }
> 
> fewTests()
[1] "a = 0.1 , d = 2.4 , x50 = 100 , b = 2 , and ny = -0.25 ."
[1] "Demo: SSny.m1"
[1] 0.171875 0.387500 1.250000 2.400000 2.400000 2.400000
[1] 0.171875 0.387500 1.250000 2.400000 2.400000 2.400000
[1] 0 0 0 0 0 0
[1] "Documentation: SS.d.nym1"
[1] 0.171875 0.387500 1.250000 2.400000 2.400000 2.400000
[1]  0.171875  0.387500  1.250000  4.700000 18.500000 73.700000
[1]   0.0   0.0   0.0  -2.3 -16.1 -71.3
[1] "1/3 - Documentation: SS.d.nym1 :  -1;0  +  -153.046897467636;31"
[1] "Simple: sSny.m1"
[1] 0.171875 0.387500 1.250000 2.400000 2.400000 2.400000
[1]  0.171875  0.387500  1.250000  4.700000 18.500000 73.700000
[1]  0.000000e+00  4.440892e-16  0.000000e+00 -2.300000e+00 -1.610000e+01
[6] -7.130000e+01
[1] "1/3 - Simple: sSny.m1 :  -1;0  +  -153.046897467636;31"
[1] "Demo: SSny.m1o3"
[1] 0.1878245 0.4378284 1.2500000 2.3877152 2.4000000 2.4000000
[1] 0.1878245 0.4378284 1.2500000 2.3877152 2.4000000 2.4000000
[1] 0 0 0 0 0 0
[1] "Documentation: SS.d.nym1o3"
[1] 0.1878245 0.4378284 1.2500000 2.3877152 2.4000000 2.4000000
[1]    0.1878245    0.4378284    1.2500000    2.3877152   30.4130036
[6] 4182.1030595
[1] -4.440892e-16  0.000000e+00  0.000000e+00  0.000000e+00 -2.801300e+01
[6] -4.179703e+03
[1] "1/3 - Documentation: SS.d.nym1o3 :  -1;0  +  -28211.0313287971;1817.26219977711"
[1] "Simple: sSny.m1o3"
[1] 0.1878245 0.4378284 1.2500000 2.3877152 2.4000000 2.4000000
[1]    0.1878245    0.4378284    1.2500000    2.3877152   30.4130036
[6] 4182.1030595
[1]     0.00000     0.00000     0.00000     0.00000   -28.01300 -4179.70306
[1] "1/3 - Simple: sSny.m1o3 :  -1;0  +  -28211.0313287971;1817.26219977711"
[1] "Demo: SSny.1"
[1] 0.2352941 0.5600000 1.2500000 1.9400000 2.2647059 2.3646154
[1] 0.2352941 0.5600000 1.2500000 1.9400000 2.2647059 2.3646154
[1] 0 0 0 0 0 0
[1] "Documentation: SS.d.ny1"
[1] 0.2352941 0.5600000 1.2500000 1.9400000 2.2647059 2.3646154
[1] 0.2352941 0.5600000 1.2500000 1.9400000 2.2647059 2.3646154
[1] 0 0 0 0 0 0
[1] "Simple: sSny.1"
[1] 0.2352941 0.5600000 1.2500000 1.9400000 2.2647059 2.3646154
[1] 0.2352941 0.5600000 1.2500000 1.9400000 2.2647059 2.3646154
[1] 0 0 0 0 0 0
[1] "Demo: SSny.2"
[1] 0.2893752 0.6613634 1.2500000 1.7620948 2.0714286 2.2344424
[1] 0.2893752 0.6613634 1.2500000 1.7620948 2.0714286 2.2344424
[1] 0 0 0 0 0 0
[1] "Documentation: SS.d.ny2"
[1] 0.2893752 0.6613634 1.2500000 1.7620948 2.0714286 2.2344424
[1] 0.2893752 0.6613634 1.2500000 1.7620948 2.0714286 2.2344424
[1] 0.000000e+00 2.220446e-16 0.000000e+00 0.000000e+00 0.000000e+00
[6] 0.000000e+00
[1] "Simple: sSny.2"
[1] 0.2893752 0.6613634 1.2500000 1.7620948 2.0714286 2.2344424
[1] 0.2893752 0.6613634 1.2500000 1.7620948 2.0714286 2.2344424
[1] 0.000000e+00 2.220446e-16 0.000000e+00 0.000000e+00 0.000000e+00
[6] 0.000000e+00
[1] "Demo: SSny.3"
[1] 0.3620577 0.7583385 1.2500000 1.6513793 1.9242614 2.0996375
[1] 0.3620577 0.7583385 1.2500000 1.6513793 1.9242614 2.0996375
[1] 0 0 0 0 0 0
[1] "Documentation: SS.d.ny3"
[1] 0.3620577 0.7583385 1.2500000 1.6513793 1.9242614 2.0996375
[1] 0.3620577 0.7583385 1.2500000 1.6513793 1.9242614 2.0996375
[1] 0 0 0 0 0 0
[1] "Simple: sSny.3"
[1] 0.3620577 0.7583385 1.2500000 1.6513793 1.9242614 2.0996375
[1] 0.3620577 0.7583385 1.2500000 1.6513793 1.9242614 2.0996375
[1] 0 0 0 0 0 0
[1] "Demo: SSny.4"
[1] 0.4505262 0.8420467 1.2500000 1.5770084 1.8162545 1.9869078
[1] 0.4505262 0.8420467 1.2500000 1.5770084 1.8162545 1.9869078
[1] 0 0 0 0 0 0
[1] "Documentation: SS.d.ny4"
[1] 0.4505262 0.8420467 1.2500000 1.5770084 1.8162545 1.9869078
[1] 0.4505262 0.8420467 1.2500000 1.5770084 1.8162545 1.9869078
[1]  4.440892e-16 -2.220446e-16  0.000000e+00  0.000000e+00  0.000000e+00
[6]  0.000000e+00
[1] "Simple: sSny.4"
[1] 0.4505262 0.8420467 1.2500000 1.5770084 1.8162545 1.9869078
[1] 0.4505262 0.8420467 1.2500000 1.5770084 1.8162545 1.9869078
[1] 0 0 0 0 0 0
> 
> q()
